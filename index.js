let express = require('express');
let path = require('path');
const cors = require('cors');
const { Pool } = require('pg');
require('dotenv').config();

let app = express()
app.use(cors());
app.use(express.json());

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    require: true,
  },
});

async function getPostgresVersion() {
  const client = await pool.connect();
  try {
    const response = await client.query('SELECT version()');
    console.log(response.rows[0]);
  } finally {
    client.release();
  }
}

getPostgresVersion();


// create new post endpoint
app.post('/posts', async (req, res) => {
  const client = await pool.connect();//acquire databaseclient
  try {
    const data = {
      title: req.body.title,
      content: req.body.content,
      author: req.body.author,
      created_at: new Date().toISOString() //Now
    };

    const query = 'INSERT INTO posts (title, content, author, created_at) VALUES ($1, $2, $3, $4)  RETURNING id';
    //$1, $2, $3, $4 placeholders for the actual data
    const params = [data.title, data.content, data.author, data.created_at];
    //params is array containing the values that willreplace the placeholders in the SQL query`data.title replace $1`

    const result = await client.query(query, params);
    data.id = result.rows[0].id; //ID of the new post(auto generated by the database)is added to our'data' object

    console.log(`Post created successfully with id ${data.id}`);
    res.json({ "status": "sucsess", "data": data, "message": "Post created successfully" });
  } catch (error) {
    console.log("Error:", error.message);
    res.status(500).json({ "error": error.message });
  } finally {
    client.release();  //release the databaseconnection back into the pool
  }
})

//Delete endpoint 
app.delete('/posts/:id', async (req, res) => {
  const client = await pool.connect(); //get databaseclient 
  const postId = req.params.id;       //extract id from url
  try {            //define SQLquery to dletepost by its ID
    const deleteQuery = 'DELETE FROM posts WHERE id = $1';
    const params = [postId];   //queryValue must be array[]
    //execyte SQl query
    await client.query(deleteQuery, params);
    //await client.query(deleteQuery, [postId])
    console.log(`Post with ID ${postId} has been deleted.`);
    res.json({ status: 'success', message: `Post with ID ${postId} has been deleted.` });
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ "error": error.message });
  } finally {
    client.release();
  }
})
//DElete by author name
app.delete('/posts/author/:authorName', async (req, res) => {
  const client = await pool.connect();
  const authorName = req.params.authorName;
  try {
    const deleteQuery = 'DELETE FROM posts WHERE author = $1';
    const params = [authorName];

    await client.query(deleteQuery, params);
    console.log(`Posts by author ${authorName} have been deleted.`);
    res.json({ status: 'sucesss', message: `Posts by author ${authorName} have been deleted.` })
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ "error": error.message });
  } finally {
    client.release();
  }
})

//Update Endpoint
app.put('/posts/:id', async (req, res) => {
  const client = await pool.connect();
  const postId = req.params.id;
  //const updatedData = req.body;

  try {
    const query = 'UPDATE posts SET title = $1, content = $2, author = $3 WHERE id =$4';
    const params = [ //const queryData=
      req.body.title, //updatedData.title,
      req.body.content,
      req.body.author,
      postId
    ];
    //execute SQLquery to update post
    await client.query(query, params);
    console.log(`Post with ID ${postId} has been updated.`);
    res.json({ status: 'success', message: `Post with ID ${postId} has been updated.` });
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ "error": error.message });
  } finally {
    client.release();
  }
})

//Get Endpoint
app.get('/posts', async (req, res) => {
  const client = await pool.connect();
  try { //SQL query to get all posts
    const query = 'SELECT * FROM posts';
    const result = await client.query(query); //run the query
    res.json(result.rows); //send the result to client/user(front-end) 
  } catch (err) {
    console.log(err.stack);
    res.status(500).send("An error occurred");
  } finally {
    client.release();
  }
})
//GEt posts by id endpoint
app.get('/posts/:id', async (req, res) => {
  const client = await pool.connect();
  const postId = req.params.id;

  try {
    const query = 'SELECT * FROM posts WHERE id = $1';

    const result = await client.query(query, [postId]);
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Post with ID ${postId} not found' });
    } else {
      res.json(result.rows);
    }
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ error: error.message });
  } finally {
    client.release();
  }
})
//Get posts by author name endpoint
app.get('/posts/author/:authorName', async (req, res) => {
  const client = await pool.connect();
  const authorName = req.params.authorName;
  try {
    const query = 'SELECT * FROM posts WHERE author = $1';
    const params = [authorName];

    const result = await client.query(query, params);
    if (result.rows.length === 0) {
      res.json({ message: `No posts by author ${authorName} found....` })
    } else {
      res.json(result.rows);
    }
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ error: error.message });
  } finally {
    client.release();
  }
})

//Get posts by date range 
app.get('/posts/dates/:startDate/:endDate', async (req, res) => {
  const client = await pool.connect();
  const startDate = req.params.startDate;
  const endDate = req.params.endDate;
  try {
    const query = 'SELECT * FROM posts WHERE created_at >= $1 AND created_at <= $2';
    const params = [startDate, endDate];
    const result = await client.query(query, params);
    res.json(result.rows);
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ "error": error.message });
  } finally {
    client.release();
  }
})

app.get('/', (req, res) => {//home
  res.sendFile(path.join(__dirname + '/index.html'));
});

app.use((req, res) => {
  res.status(404).sendFile(path.join(__dirname + '/404.html'));
});

app.listen(3000, () => {
  console.log('App is listening on port 3000');
});


